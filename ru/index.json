[{"content":"","date":null,"permalink":"/ru/tags/devlog/","section":"Tags","summary":"","title":"Devlog"},{"content":"","date":null,"permalink":"/ru/tags/godot/","section":"Tags","summary":"","title":"Godot"},{"content":"","date":null,"permalink":"/ru/tags/modding/","section":"Tags","summary":"","title":"Modding"},{"content":"","date":null,"permalink":"/ru/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/ru/tags/wasm/","section":"Tags","summary":"","title":"Wasm"},{"content":" При разработке Arcomage с использованием Godot .NET я столкнулся с проблемой: как добавить поддержку моддинга на основе скриптов в игру? Проблема заключалась в том, что я не хотел разрешать прямую инъекцию DLL — это крайне небезопасно и подвержено злоупотреблениям, позволяющим внедрять вредоносный код, который может скомпрометировать системы пользователей или украсть конфиденциальные данные, такие как пароли.\nВместо этого я выбрал подход с использованием песочницы, при котором моды выполняются безопасно и не представляют угрозы для конечных пользователей. Моя цель состояла в создании единого API для всех модов, чтобы сделать их не только безопаснее, но и проще в написании. Именно тогда я наткнулся на видео от безымянного разработчика, в котором чётко и понятно объясняется, как реализовать поддержку модов на WASM. Огромное спасибо автору за его идеи!\nЯ уже знал о WebAssembly, но никогда не рассматривал его как песочницу для запуска скриптовых модов в игре. Было удивительно узнать, что Microsoft Flight Simulator 2020 использует WebAssembly для скриптов модов — и это действительно круто!\nИтак, я решил попробовать нечто подобное для Arcomage. В этой статье я поделюсь своими находками и идеями по реализации WASM-моддинга в Godot .NET.\nЧто такое WebAssembly и как им пользоваться? #WASM — это формат байткода, который выполняется в виртуальной машине. В отличие от CIL .NET, WASM предназначен для исполнения в браузерах или в любых приложениях, которые его поддерживают. В нашем случае мы используем версию Godot с поддержкой .NET. Для .NET существует несколько встроенных WASM-рантаймов. В моем проекте я использовал Wasmtime от Bytecode Alliance.\nПример: Создание WASM-мода #Настройка #Сначала добавьте пакет Wasmtime через NuGet в ваш проект Godot .NET:\ndotnet add package wasmtime Либо добавьте следующую ссылку на пакет в ваш файл .csproj:\n\u0026lt;PackageReference Include=\u0026#34;Wasmtime\u0026#34; Version=\u0026#34;22.0.0\u0026#34; /\u0026gt; Не забудьте выполнить dotnet restore после внесения изменений в файл проекта.\nЧтобы компилировать файлы WASM из AssemblyScript, установите Node.js (в комплекте с npm). Вы можете скачать его с официального сайта Node.js. Проверьте установку с помощью команд:\nnode -v npm -v В этом примере мы будем компилировать WASM с помощью AssemblyScript. Если вы предпочитаете другой язык (например, Rust с wasm-pack), ознакомьтесь с его документацией. Также настоятельно рекомендую изучить документацию компилятора AssemblyScript.\nПосле установки Node.js выполните:\nnpm install -g assemblyscript Эта команда устанавливает компилятор AssemblyScript глобально (либо локально, если предпочитаете).\nПосле установки необходимых инструментов, пора писать код!\nWASM #Выберите рабочую директорию и создайте два файла: env.ts и mod.ts.\nВ файле env.ts определите экспортируемые функции, которые будут доступны вашему WASM-моду:\n@external(\u0026#34;env\u0026#34;, \u0026#34;host_log\u0026#34;) declare function host_log(ptr: i32, len: i32): void; export function log(message: string): void { const encoded = String.UTF8.encode(message); host_log(changetype\u0026lt;i32\u0026gt;(encoded), encoded.byteLength); } В этом примере функция log отправляет сообщение хосту через host_log, которая принимает указатель на строку, закодированную в UTF-8, и её длину.\nВ файле mod.ts напишите код, который будет выполняться в WASM-моде:\nimport { log } from \u0026#34;./env\u0026#34;; export function init(): void { log(\u0026#34;Hello, World!\u0026#34;); } Здесь экспортированная функция init будет вызвана при инициализации мода, что вызовет отправку лог-сообщения. На стороне Godot вы обработаете это (например, выведя сообщение в консоль с помощью GD.Print).\nЭта простая настройка иллюстрирует концепцию. Как разработчик, поделитесь файлом env.ts с мододелами, чтобы они могли использовать определённые функции. В этой схеме mod.ts служит точкой входа для мода, где вы указываете функцию входа (в данном случае, init), которая автоматически вызывается игрой при загрузке WASM-файла.\nЧтобы скомпилировать ваш WASM-мод, выполните:\nasc .\\mod.ts -o mod.wasm Если AssemblyScript не установлен глобально, убедитесь, что вы указали корректный путь. Выполнение этой команды создаёт файл mod.wasm — точку входа для вашего мода.\nИнтеграция с Godot .NET #Поместите скомпилированный WASM-файл в директорию user вашего проекта Godot (например, user://mod.wasm).\nРекомендую использовать пользовательскую директорию, включив её с помощью флага application/config/use_custom_user_dir в файле project.godot. Также задайте имя папки через application/config/custom_user_dir_name.\nСоздайте новый C# класс, наследующий от Node — в моем примере он называется WasmLoader:\nusing Godot; using System.Text; using Wasmtime; using Engine = Wasmtime.Engine; public partial class WasmLoader : Node { public override void _Ready() { byte[] wasmBytes; using (var file = FileAccess.Open(\u0026#34;user://mod.wasm\u0026#34;, FileAccess.ModeFlags.Read)) wasmBytes = file.GetBuffer((int)file.GetLength()); using var engine = new Engine(); using var module = Module.FromBytes(engine, \u0026#34;mod\u0026#34;, wasmBytes); using var store = new Store(engine); using var linker = new Linker(engine); linker.Define(\u0026#34;env\u0026#34;, \u0026#34;host_log\u0026#34;, Function.FromCallback(store, (Caller caller, int ptr, int len) =\u0026gt; { var memory = caller.GetMemory(\u0026#34;memory\u0026#34;); if (memory is null) return; var span = memory.GetSpan\u0026lt;byte\u0026gt;(0); var message = Encoding.UTF8.GetString(span.Slice(ptr, len).ToArray()); GD.Print(message); })); linker.Define(\u0026#34;env\u0026#34;, \u0026#34;abort\u0026#34;, Function.FromCallback(store, (int msg, int file, int line, int column) =\u0026gt; { GD.Print($\u0026#34;Abort called at {file}:{line}:{column}\u0026#34;); })); var instance = linker.Instantiate(store, module); instance.GetAction(\u0026#34;init\u0026#34;)?.Invoke(); } } Разберем, что происходит в этом коде:\nWASM-файл загружается из user://mod.wasm и его байты передаются в Module.FromBytes. Создаются Engine, Module, Store и Linker для выполнения WASM-мода. Определяются функции, экспортируемые модом. Здесь host_log принимает указатель и длину, декодирует строку из памяти и выводит её. Также определяется функция abort; она вызывается при ошибках внутри WASM-мода. Хотя она может и не понадобиться, компилятор включает её по умолчанию. Если не определить её, вы получите исключение Wasmtime.WasmtimeException из-за неопределённого импорта. Наконец, WASM-мод инициализируется, и вызывается его функция init, которая выводит \u0026ldquo;Hello, World!\u0026rdquo; в консоль. После создания класса WasmLoader добавьте его в сцену и запустите игру. Если всё настроено правильно, вы увидите \u0026ldquo;Hello, World!\u0026rdquo; в консоли. Либо вы можете добавить загрузчик в Autoload вашего проекта, чтобы он запускался при старте.\nСледующие шаги #Вот несколько идей для расширения вашей системы моддинга:\nПередача обратных вызовов процесса:\nПередавайте обратные вызовы _Process и _PhysicsProcess в WASM-мод (не забудьте включить параметр delta), чтобы он мог взаимодействовать с игрой каждый кадр — например, обновлять позиции объектов:\npublic override void _Process(double delta) { foreach (var mod in _mods.Values) mod.Instance.GetFunction(\u0026#34;process\u0026#34;)?.Invoke(delta); } Здесь _mods — это Dictionary, хранящий загруженные моды, где ключом является имя мода, а значением — запись (содержащая экземпляр мода и его путь). Аналогично можно передавать события (например, событие выхода), когда игра закрывается или мод выгружается.\nСоздание API для модов:\nРазработайте API для модов, которое будет предоставлять функции (например, log, spawn, destroy, move) для мододелов. Стремитесь к простоте и ясности, а также подробно задокументируйте API, чтобы мододелы знали, что доступно и как это использовать.\nАвтоматическая загрузка модов:\nРеализуйте функциональность для загрузки WASM-модов из определенной папки, позволяя мододелам просто помещать свои файлы модов в папку для автоматической загрузки. Также рассмотрите возможность добавления поддержки выгрузки модов, чтобы избежать проблем с производительностью при слишком большом количестве активных модов. Полноценный интерфейс управления модами (например, интегрированный в меню игры) станет отличным улучшением.\nНадеюсь, эта небольшая статья поможет вам реализовать WASM-моддинг в ваших играх на Godot .NET. Если у вас возникнут вопросы или потребуется дополнительная помощь, не стесняйтесь оставить комментарий — я постараюсь помочь!\n","date":"13.02.2025","permalink":"/ru/dev/wasm-modding-godot/","section":"Проекты","summary":"Откройте для себя безопасный, изолированный WASM-моддинг для вашей игры на Godot .NET с использованием Wasmtime и AssemblyScript. Создайте собственный API для модов, который исключает риски, связанные с внедрением DLL.","title":"WASM-моддинг для ваших игр на Godot .NET"},{"content":"Девблоги о моих пет-проектах, или просто о том, над чем я работаю в данный момент.\nПосты #","date":null,"permalink":"/ru/dev/","section":"Проекты","summary":"Девблоги о моих пет-проектах, или просто о том, над чем я работаю в данный момент.","title":"Проекты"},{"content":" 25 лет • Фанат .NET • Энтузиаст Godot • Переводчик • Видеомейкер ","date":null,"permalink":"/ru/","section":"Artem Chernykh (@DarkPro1337)","summary":"25 лет, Фанат .NET, Энтузиаст Godot, Переводчик, Видеомейкер. C# Tools Programmer @ Saber Interactive.","title":"Artem Chernykh (@DarkPro1337)"},{"content":" Скачать CV Армения, Ереван\ndarkprothekun@gmail.com\n@darkpro1337\nLinkedIn\nGitHub\nРезюме Опытный разработчик на C# с уверенными навыками в создании внутренних инструментов, автоматизации рабочих процессов и интеграции систем между командами. Ранее занимался WPF-разработкой в Saber Interactive, сейчас развиваюсь в сторону инфраструктурных задач, связанных с автоматизацией, Active Directory и интеграцией сервисов. Ценю чистый и поддерживаемый код, командное взаимодействие и практичные решения, повышающие эффективность.\nОпыт работы Программист инструментов разработки Saber Interactive в Ереване 2022—2025\nРазрабатывал и поддерживал передовые утилиты отладки и редакторы уровней для ускорения рабочих процессов разработки и адаптации к изменяющимся требованиям проекта. Сократил количество проблем с инструментами на 25% благодаря проактивному обслуживанию, устранению ошибок и регулярным обновлениям. Создавал интуитивно понятные пользовательские интерфейсы на WPF, что сокращало ручной труд на 20% и снижало задержки интерфейса на 30%, повышая общую эффективность команды. Разрабатывал кастомные элементы управления WPF и интегрировал как внутренние, так и внешние API (например, Figma) для расширения функциональности инструментов и обеспечения их бесшовной совместимости. Сотрудничал с дизайн-командами для модернизации элементов интерфейса, что значительно улучшало пользовательский опыт. Обеспечивал высокие стандарты качества кода посредством систематических код ревью и контроля версий с использованием Perforce. Ключевые проекты Образование Государственный университет морского и речного флота имени адмирала Макарова в Котласе 2018—2021\nСредний балл: 4.72 из 5.0 Диплом о среднем профессиональном образовании в области информационных систем (с отличием) Сосредоточился на практической разработке систем в рамках интенсивной стажировки Навыки и знания Языки: C#, C++, Python Фреймворки: WPF, WCF, ASP.NET, AvaloniaUI Инструменты: Git, Perforce, Godot Engine, Unreal Engine Разметка: XAML, HTML5 Базы данных: MS SQL, MySQL, SQLite Скриптинг: PowerShell, Batch, Bash Языки Английский (продвинутый) Русский (родной) Польский (базовый) Пет-проекты Arcomage — ремейк карточной игры Arcomage на Godot 4 (.NET). Увлечения Инди-разработка игр — в настоящее время разрабатываю Arcomage и иногда помогаю друзьям с их проектами. Компьютерная графика — время от времени экспериментирую с Blender и Daz3D; ранее работал с Source Filmmaker. Игра на гитаре и вокал — активно занимаюсь вокалом и игрой на гитаре; интересуюсь альтернативной и метал-музыкой. Видеомонтаж — создаю видео для YouTube и хайлайты стримов. Моддинг игр — создаю моды для развлечения, с планами поделиться несколькими интересными в будущем. Дополнительные навыки и интересы Готов к релокации и удалённой работе. Нравится обучать людей и делиться опытом. Увлечён изучением нового и написанием подробных руководств. ","date":null,"permalink":"/ru/cv/","section":"Artem Chernykh (@DarkPro1337)","summary":"Опытный разработчик на C# с уверенными навыками в создании внутренних инструментов, автоматизации рабочих процессов и интеграции систем между командами. Ранее занимался WPF-разработкой в Saber Interactive, сейчас развиваюсь в сторону инфраструктурных задач, связанных с автоматизацией, Active Directory и интеграцией сервисов. Ценю чистый и поддерживаемый код, командное взаимодействие и практичные решения, повышающие эффективность.","title":"Артем Черных"},{"content":"\rНоутбук\rLegion 5 15ARH7H\rAMD Ryzen 7 5800H\rNVIDIA GeForce RTX 3060\rSamsung 16Gb DDR5-4800MHz\r2x SKHynix 2TB SSD M.2 NVMe\rПериферия\rВебкамера\rLogitech StreamCam\rМикрофон\rElgato Wave:1\rНаушники\rAudio-Technica ATH-M40x\rМонитор\rLG 24MK600M\rМышь\rLogitech G304\rКлавиатура\rNoname Mechanical\rСвитчи Jerrzi Honey Bean\rГеймпад\rXbone Rev.3\rКарта захвата\rEzcap326C\rДругие девайсы\rТелефон\rGoogle Pixel 7\rОбсидиан\rПортативный ПК\rSteam Deck OLED\r512 GB\rКонсоль\rNintendo Switch OLED\rБелый\rОдноплатник\rRaspberry Pi 4 Model B\r4GB RAM\r","date":null,"permalink":"/ru/about/devices/","section":"Обо мне","summary":"Список устройств, которые я использую для работы и развлечений.","title":"Мои девайсы"},{"content":"Привет, меня зовут Артём! Я разработчик программного обеспечения, живу Ереване. Работаю как C#-разработчик, фокусируюсь на автоматизации, внутренних инструментах и интеграции сервисов. Также имею опыт разработки WPF-приложений и инструментов для разработчиков. Мне нравится создавать практичные решения, которые делают повседневные рабочие процессы проще и удобнее.\nМои девайсы\rПет-проекты Arcomage — фанатский ремейк классической карточной игры Arcomage на Godot Engine 4 (.NET). Прочитать девлоги. GodotHub — лаунчер и менеджер экземпляров для Godot Engine на AvaloniaUI. Заброшен на неопределённое время, извините. Переводы Мне нравится помогать сообществу, переводя руководства с английского на русский:\nDiscord Webhooks (оригинал от birdie0) GML Guide (оригинал от GDPalace) Трек на который я залип в последнее время Прослушивания\rЛюбимый фильм и сериал Фильм\nДжентельмены\rСериал\nКлан Сопрано\rЛюбимые игры Профиль\rПоддержать меня Sponsors\rUSDT TRC20\rBuy Me a Coffee\r","date":null,"permalink":"/ru/about/","section":"Обо мне","summary":"Немного обо мне.","title":"Обо мне"},{"content":"","date":null,"permalink":"/ru/tags/arcomage/","section":"Tags","summary":"","title":"Arcomage"},{"content":"Всем привет! Я закончил университет и получил диплом, уже успел устроиться на работу. Переболел COVID-19, без осложнений, перенёс в относительно легкой форме. И я готов работать над ремейком дальше!\nЯ работал над локализацией, и теперь карты русской локали полностью локализованы!\nПо-прежнему есть проблемы с тем, что названия карт не подходят для русской локали, но в целом все работает нормально.\nТакже для локалей, отличных от английской, панели ресурсов будут выглядеть немного по-другому, из-за того, что названия этих самых ресурсов не вписываются в то место, где они находятся в английской локали. Я просто перенес их наверх, как это было в русской версии Аркомага для PC. Вот небольшой пример этого в игре:\nИз текущих планов я бы хотел отметить, что хочу переписать ИИ для бота. Он работает очень странно и иногда зависает в игре. Я бы хотел избавиться от этого и научить его использовать карты с принудительным сбросом. Мне нужно закончить анимацию появления карты в колоде, я до сих пор не понял, как это сделать правильно. Возможно, мне придется кое-что переписать, надеюсь, это не будет большой проблемой.\nЭто все новости на текущий день. Спасибо за внимание!\n","date":"25.07.2021","permalink":"/ru/dev/2021/arcomage-remake-0-3-alpha-updates/","section":"Проекты","summary":"Всем привет! Я закончил университет и получил диплом, уже успел устроиться на работу. Переболел COVID-19, без осложнений, перенёс в относительно легкой форме. И я готов работать над ремейком дальше!","title":"Обновление ремейка Аркомага 0.3-alpha"},{"content":"Привет всем! Это снова Артём, я жив, я всё ещё работаю над ремейком Аркомага, последние несколько месяцев я был очень занят из-за учёбы. Но я старался найти время, чтобы сделать хоть какой-то прогресс. Поэтому я хотел бы написать небольшой журнал текущих изменений.\n1. У игры будет собственный сайт! #Да, у игры уже есть свои страницы на itch.io и GameJolt, но я подумал, что было бы неплохо, если бы у ремейка был свой собственный сайт. Выглядит он примерно так.\nОсновная идея - это страница, где вы можете скачать последнюю версию игры с помощью одной кнопки.\n2. HTML5-версия! #Да, в игру можно играть в браузере. Надеюсь, что эта функция доживет до релиза, но похоже, что вкладка с игрой потребляет не больше оперативной памяти, чем вкладка YouTube.\nЕсли все пойдет хорошо, HTML5-версия игры будет такой же, как и обычная, но если что-то пойдет не так, я сделаю отдельную версию игры для браузера.\n3. Кладбище карт #Это место, куда будут помещаться карты после использования, - довольно простая функция, которая была в оригинальной игре, но я убил на нее много времени.\n4. Частицы! #Как и в оригинальной игре, карты имеют свои положительные и отрицательные эффекты для игроков, для наглядности отображаемые в виде частиц, разлетающихся от объектов внимания, теперь они есть и в моем ремейке.\n5. Действие принудительного сброса карт #В оригинальной игре был ряд карт, которые имели принудительное действие сброса, эта функция еще не была реализована в ремейке, НО теперь она есть.\n6. Локализации! #Оригинальная игра имела разные языковые версии в разных дистрибутивах игры. Это не самый удобный способ поддержки языковых пакетов (локализаций). Теперь вы можете легко перевести игру на свой родной язык. Для этого достаточно связаться со мной и попросить доступ к онлайн-таблице.\n\u0026hellip;и это еще не конец! #Основной функционал игры (в режиме одиночной игры) почти готов! Скоро выйдет первая оффлайн-версия игры. Следующим крупным обновлением станет онлайновый мультиплеер.\nК сожалению, в данный момент я очень занят учебой и не могу уделять разработке большую часть своего времени, прошу набраться терпения!.\n","date":"27.05.2021","permalink":"/ru/dev/2021/arcomage-remake-updates-first-release-soon/","section":"Проекты","summary":"Я все еще работаю над ремейком Аркомага, последние несколько месяцев я был очень занят из-за учебы. Но я старался найти время, чтобы сделать хоть какой-то прогресс. Поэтому я хотел бы написать небольшой журнал текущих изменений.","title":"Обновления ремейка Аркомага. Первый релиз уже скоро!"},{"content":"Привет! Я инди-разработчик, работающий над ремейком карточной мини-игры из серии Might \u0026amp; Magic под названием Arcomage.\nЯ очень люблю Arcomage и хочу сделать действительно хороший ремейк. Я очень стараюсь сохранить его оригинальный вид. Я не хочу добавлять никакой другой функциональности, нарушающей баланс. Возможно, позже я добавлю прямую возможность создавать свои собственные колоды, что-то вроде модов, как основанных на стандартных колодах карт, так и полностью своих собственных. В данный момент я работаю над повторением версии, которая была в самой Might and Magic, то есть версии для одного игрока и компьютера в качестве оппонента. Позже я буду работать над многопользовательскими режимами. Поскольку я разрабатываю все это в одиночку, у меня нет даты выхода конкретных версий.\nЧто уже сделано на данный момент:\nПолностью обновлена графика (с использованием апскейла через Topaz Gigapixel AI и waifu2x). Теперь вся графика выглядит просто отлично, и точно так же, как в оригинале. Переместил всю оригинальную колоду карт в базу данных для удобства локализации. Весь интерфейс также легко локализовать. Базовая механика. Использование карт и их сценариев. Оригинальные звуки были перенесены в ремейк. Я подумываю об улучшении их качества, но пока не знаю, как это сделать. Оригинальный интерфейс. Все выглядит точно так же, как и в оригинале. А еще есть крутые частицы! Какой-то ИИ для противника (компьютера). Я уже очень хочу переписать его с нуля, но все руки не доходят. Вы можете найти список всех запланированных функций или функций, над которыми я работаю сейчас, ну и просто прогресс проекта, на моей доске Trello.\nОгромное спасибо всем за проявленный интерес к проекту.\nСпасибо Александру Кропу за приобщение к удивительному миру Might and Magic и Arcomage в частности. Огромное спасибо ему за вдохновение на создание этого ремейка.\nСпасибо крутым ребятам с r/MightAndMagic subreddit, они очень тепло приняли мой пост о том, что я разрабатываю ремейк.\n","date":"05.10.2020","permalink":"/ru/dev/2020/arcomage-remake-i-m-working-currently/","section":"Проекты","summary":"Привет! Я инди-разработчик, работающий над ремейком карточной мини-игры из серии Might \u0026amp; Magic под названием Arcomage.","title":"Ремейк Arcomage над которым я сейчас работаю"},{"content":"","date":null,"permalink":"/ru/categories/","section":"Categories","summary":"","title":"Categories"}]