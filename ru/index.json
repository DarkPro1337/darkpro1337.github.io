[{"content":"","date":null,"permalink":"/ru/tags/devlog/","section":"Tags","summary":"","title":"Devlog"},{"content":"","date":null,"permalink":"/ru/tags/godot/","section":"Tags","summary":"","title":"Godot"},{"content":"","date":null,"permalink":"/ru/tags/modding/","section":"Tags","summary":"","title":"Modding"},{"content":"","date":null,"permalink":"/ru/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/ru/tags/wasm/","section":"Tags","summary":"","title":"Wasm"},{"content":"При разработке Arcomage на Godot .NET возникла задача: как добавить поддержку моддинга через скрипты, не прибегая к прямой инъекции DLL, что небезопасно и может привести к серьезным проблемам, таким как внедрение вирусов или утечка персональных данных.\nЧтобы избежать этих рисков, я решил реализовать моды в отдельной песочнице. Цель — создать общее API для модов, чтобы сделать их безопасными и удобными для написания. Меня вдохновило видео the nameless dev, которое наглядно демонстрирует, как реализовать поддержку WASM модов. Огромное спасибо автору за его знания!\nРанее я знал о WebAssembly, но не рассматривал его как песочницу для модов. Узнав, что даже Microsoft Flight Simulator 2020 использует WASM для выполнения скриптов модов, я понял: это отличная идея!\nВ этой статье я поделюсь опытом и идеями по внедрению WASM моддинга в Godot .NET.\nЧто такое WebAssembly и как его использовать? #WASM — это байткод, выполняемый в виртуальной машине. В отличие от CIL в .NET, WASM можно запускать в браузере или любом приложении с поддержкой этого формата. В нашем случае это Godot .NET. Для .NET существует несколько встроенных WASM-рантаймов, и я выбрал Wasmtime от Bytecode Alliance.\nПример создания WASM мода #Подготовка # Добавьте NuGet-пакет Wasmtime в проект:\ndotnet add package wasmtime Или добавьте в .csproj:\n\u0026lt;PackageReference Include=\u0026#34;Wasmtime\u0026#34; Version=\u0026#34;22.0.0\u0026#34; /\u0026gt; Затем выполните dotnet restore.\nДля компиляции WASM файлов из AssemblyScript установите Node.js (npm устанавливается вместе с ним). Скачайте установщик с официального сайта Node.js и проверьте установки:\nnode -v npm -v Установите AssemblyScript глобально:\nnpm install -g assemblyscript WASM #Создайте в выбранной директории два файла: env.ts и mod.ts.\nВ env.ts объявите экспортируемые функции:\n@external(\u0026#34;env\u0026#34;, \u0026#34;host_log\u0026#34;) declare function host_log(ptr: i32, len: i32): void; export function log(message: string): void { const encoded = String.UTF8.encode(message); host_log(changetype\u0026lt;i32\u0026gt;(encoded), encoded.byteLength); } Функция log передаёт сообщение через host_log, которая принимает указатель на строку и её длину.\nВ mod.ts напишите код мода:\nimport { log } from \u0026#34;./env\u0026#34;; export function init(): void { log(\u0026#34;Hello, World!\u0026#34;); } Функция init служит точкой входа и вызывается при инициализации мода.\nСкомпилируйте мод:\nasc .\\mod.ts -o mod.wasm После компиляции в директории появится файл mod.wasm.\nИнтеграция с Godot .NET # Поместите скомпилированный mod.wasm в директорию user вашего Godot проекта (например, user://mod.wasm).\nРекомендую использовать пользовательскую директорию (настраивается через application/config/use_custom_user_dir и application/config/custom_user_dir_name в project.godot).\nСоздайте новый C# класс, наследующий Node (например, WasmLoader):\nusing Godot; using System.Text; using Wasmtime; using Engine = Wasmtime.Engine; public partial class WasmLoader : Node { public override void _Ready() { byte[] wasmBytes; using (var file = FileAccess.Open(\u0026#34;user://mod.wasm\u0026#34;, FileAccess.ModeFlags.Read)) wasmBytes = file.GetBuffer((int)file.GetLength()); using var engine = new Engine(); using var module = Module.FromBytes(engine, \u0026#34;mod\u0026#34;, wasmBytes); using var store = new Store(engine); using var linker = new Linker(engine); linker.Define(\u0026#34;env\u0026#34;, \u0026#34;host_log\u0026#34;, Function.FromCallback(store, (Caller caller, int ptr, int len) =\u0026gt; { var memory = caller.GetMemory(\u0026#34;memory\u0026#34;); if (memory is null) return; var span = memory.GetSpan\u0026lt;byte\u0026gt;(0); var message = Encoding.UTF8.GetString(span.Slice(ptr, len).ToArray()); GD.Print(message); })); linker.Define(\u0026#34;env\u0026#34;, \u0026#34;abort\u0026#34;, Function.FromCallback(store, (int msg, int file, int line, int column) =\u0026gt; { GD.Print($\u0026#34;Abort called at {file}:{line}:{column}\u0026#34;); })); var instance = linker.Instantiate(store, module); instance.GetAction(\u0026#34;init\u0026#34;)?.Invoke(); } } Разберем, что происходит в коде:\nЗагружается WASM файл из user://mod.wasm и его байты передаются в Module.FromBytes. Создаются объекты Engine, Module, Store и Linker для выполнения мода. Определяются экспортированные функции: host_log (декодирует строку из памяти и выводит её) и abort (обрабатывает ошибки модов). Инстанцируется мод и вызывается функция init, выводящая \u0026ldquo;Hello, World!\u0026rdquo;. Добавьте WasmLoader в сцену или настройте его в Autoload для автоматического запуска.\nДальнейшие шаги # Проброс Process Callback:\nПробрасывайте вызовы _Process и _PhysicsProcess в моды, передавая параметр delta, чтобы моды могли обновлять состояние игры:\npublic override void _Process(double delta) { foreach (var mod in _mods.Values) mod.Instance.GetFunction(\u0026#34;process\u0026#34;)?.Invoke(delta); } Здесь _mods — Dictionary, где ключом является имя мода, а значением — его инстанс и путь. Аналогично можно передавать события, например, при выходе из игры.\nСоздание API для модов:\nРазработайте понятный API, предоставляющий функции вроде log, spawn, destroy, move и т.д. Задокументируйте его для удобства моддеров.\nАвтоматическая загрузка модов:\nРеализуйте функционал для загрузки WASM модов из отдельной папки, чтобы моддеры могли просто добавлять свои моды для автоматической загрузки. Не забудьте предусмотреть возможность их выгрузки для оптимизации работы игры.\nНадеюсь, эта небольшая статья поможет вам внедрить WASM моддинг в ваши игры на Godot .NET. Если возникнут вопросы или потребуется помощь, оставляйте комментарии — я постараюсь помочь!\n","date":"13.02.2025","permalink":"/ru/dev/wasm-modding-godot/","section":"Проекты","summary":"При разработке Arcomage на Godot .NET я столкнулся с проблемой: как добавить поддержку скриптового моддинга в игру?","title":"WASM моддинг для ваших игр на Godot .NET"},{"content":"Девблоги о моих пет-проектах, или просто о том, над чем я работаю в данный момент.\nПосты #","date":null,"permalink":"/ru/dev/","section":"Проекты","summary":"Девблоги о моих пет-проектах, или просто о том, над чем я работаю в данный момент.","title":"Проекты"},{"content":" 25 лет • Фанат .NET • Энтузиаст Godot • Переводчик • Видеомейкер ","date":null,"permalink":"/ru/","section":"Artem Chernykh (@DarkPro1337)","summary":"24 года, Фанат .NET, Энтузиаст Godot, Переводчик, Видеомейкер. C# Tools Programmer @ Saber Interactive.","title":"Artem Chernykh (@DarkPro1337)"},{"content":" Скачать CV Армения, Ереван\ndarkprothekun@gmail.com\n@darkpro1337\nLinkedIn\nGitHub\nРезюме Программист инструментов разработки, ориентированный на результат, с подтверждённым опытом работы в Saber Interactive. Специализируюсь на разработке надёжных и эффективных решений на базе WPF, оптимизирующих рабочие процессы и повышающих удовлетворённость пользователей. Умею объединять технические инновации с практическим применением, благодаря чему стабильно достигаю ощутимых улучшений через командное взаимодействие, высокое качество кода и гибкие методологии.\nОпыт работы Программист инструментов разработки Saber Interactive в Ереване 2022—н.в.\nРазрабатывал и поддерживал передовые утилиты отладки и редакторы уровней для ускорения рабочих процессов разработки и адаптации к изменяющимся требованиям проекта. Сократил количество проблем с инструментами на 25% благодаря проактивному обслуживанию, устранению ошибок и регулярным обновлениям. Создавал интуитивно понятные пользовательские интерфейсы на WPF, что сокращало ручной труд на 20% и снижало задержки интерфейса на 30%, повышая общую эффективность команды. Разрабатывал кастомные элементы управления WPF и интегрировал как внутренние, так и внешние API (например, Figma) для расширения функциональности инструментов и обеспечения их бесшовной совместимости. Сотрудничал с дизайн-командами для модернизации элементов интерфейса, что значительно улучшало пользовательский опыт. Обеспечивал высокие стандарты качества кода посредством систематических код ревью и контроля версий с использованием Perforce. Ключевые проекты Образование Государственный университет морского и речного флота имени адмирала Макарова в Котласе 2018—2021\nСредний балл: 4.72 из 5.0 Диплом о среднем профессиональном образовании в области информационных систем (с отличием) Сосредоточился на практической разработке систем в рамках интенсивной стажировки Навыки и знания Языки: C#, C++, Python Фреймворки: WPF, WCF, ASP.NET, AvaloniaUI Инструменты: Git, Perforce, Godot Engine, Unreal Engine Разметка: XAML, HTML5 Базы данных: MS SQL, MySQL, SQLite Скриптинг: PowerShell, Batch, Bash Языки Английский (продвинутый) Русский (родной) Польский (базовый) Пет-проекты Arcomage — ремейк карточной игры Arcomage на Godot 4 (.NET). Увлечения Инди-разработка игр — в настоящее время разрабатываю Arcomage и иногда помогаю друзьям с их проектами. Компьютерная графика — время от времени экспериментирую с Blender и Daz3D; ранее работал с Source Filmmaker. Игра на гитаре — постепенно совершенствую технику, хотя не регулярно. Видеомонтаж — создаю видео для YouTube и хайлайты стримов. Моддинг игр — создаю моды для развлечения, с планами поделиться несколькими интересными в будущем. Дополнительные навыки и интересы Готов к релокации и удалённой работе. Нравится обучать людей и делиться опытом. Увлечён изучением нового и написанием подробных руководств. ","date":null,"permalink":"/ru/cv/","section":"Artem Chernykh (@DarkPro1337)","summary":"Программист инструментов разработки, ориентированный на результат, с подтверждённым опытом работы в Saber Interactive. Специализируюсь на разработке надёжных и эффективных решений на базе WPF, оптимизирующих рабочие процессы и повышающих удовлетворённость пользователей. Умею объединять технические инновации с практическим применением, благодаря чему стабильно достигаю ощутимых улучшений через командное взаимодействие, высокое качество кода и гибкие методологии.","title":"Артем Черных"},{"content":"Привет, меня зовут Артём! Я разработчик программного обеспечения, живу в Ереване. В настоящее время работаю в Saber Interactive на позиции Tools Programmer, специализируюсь на WPF (MVVM) с использованием C# и иногда C++. Мне нравится создавать инструменты, которые делают рабочие процессы эффективнее и приятнее.\nПет-проекты Arcomage — фанатский ремейк классической карточной игры Arcomage на Godot Engine 4 (.NET). GodotHub — лаунчер и менеджер экземпляров для Godot Engine на AvaloniaUI. Переводы Мне нравится помогать сообществу, переводя руководства с английского на русский:\nDiscord Webhooks (оригинал от birdie0) GML Guide (оригинал от GDPalace) Трек на который я залип в последнее время Прослушивания\rЛюбимый фильм и сериал Фильм\nДжентельмены\rСериал\nКлан Сопрано\rЛюбимые игры Профиль\rПоддержать меня Sponsors\rUSDT TRC20\rBuy Me a Coffee\r","date":null,"permalink":"/ru/about/","section":"Artem Chernykh (@DarkPro1337)","summary":"Немного о себе","title":"Обо мне"},{"content":"","date":null,"permalink":"/ru/tags/arcomage/","section":"Tags","summary":"","title":"Arcomage"},{"content":"Всем привет! Я закончил университет и получил диплом, уже успел устроиться на работу. Переболел COVID-19, без осложнений, перенёс в относительно легкой форме. И я готов работать над ремейком дальше!\nЯ работал над локализацией, и теперь карты русской локали полностью локализованы!\nПо-прежнему есть проблемы с тем, что названия карт не подходят для русской локали, но в целом все работает нормально.\nТакже для локалей, отличных от английской, панели ресурсов будут выглядеть немного по-другому, из-за того, что названия этих самых ресурсов не вписываются в то место, где они находятся в английской локали. Я просто перенес их наверх, как это было в русской версии Аркомага для PC. Вот небольшой пример этого в игре:\nИз текущих планов я бы хотел отметить, что хочу переписать ИИ для бота. Он работает очень странно и иногда зависает в игре. Я бы хотел избавиться от этого и научить его использовать карты с принудительным сбросом. Мне нужно закончить анимацию появления карты в колоде, я до сих пор не понял, как это сделать правильно. Возможно, мне придется кое-что переписать, надеюсь, это не будет большой проблемой.\nЭто все новости на текущий день. Спасибо за внимание!\n","date":"25.07.2021","permalink":"/ru/dev/2021/arcomage-remake-0-3-alpha-updates/","section":"Проекты","summary":"Всем привет! Я закончил университет и получил диплом, уже успел устроиться на работу. Переболел COVID-19, без осложнений, перенёс в относительно легкой форме. И я готов работать над ремейком дальше!","title":"Обновление ремейка Аркомага 0.3-alpha"},{"content":"Привет всем! Это снова Артём, я жив, я всё ещё работаю над ремейком Аркомага, последние несколько месяцев я был очень занят из-за учёбы. Но я старался найти время, чтобы сделать хоть какой-то прогресс. Поэтому я хотел бы написать небольшой журнал текущих изменений.\n1. У игры будет собственный сайт! #Да, у игры уже есть свои страницы на itch.io и GameJolt, но я подумал, что было бы неплохо, если бы у ремейка был свой собственный сайт. Выглядит он примерно так.\nОсновная идея - это страница, где вы можете скачать последнюю версию игры с помощью одной кнопки.\n2. HTML5-версия! #Да, в игру можно играть в браузере. Надеюсь, что эта функция доживет до релиза, но похоже, что вкладка с игрой потребляет не больше оперативной памяти, чем вкладка YouTube.\nЕсли все пойдет хорошо, HTML5-версия игры будет такой же, как и обычная, но если что-то пойдет не так, я сделаю отдельную версию игры для браузера.\n3. Кладбище карт #Это место, куда будут помещаться карты после использования, - довольно простая функция, которая была в оригинальной игре, но я убил на нее много времени.\n4. Частицы! #Как и в оригинальной игре, карты имеют свои положительные и отрицательные эффекты для игроков, для наглядности отображаемые в виде частиц, разлетающихся от объектов внимания, теперь они есть и в моем ремейке.\n5. Действие принудительного сброса карт #В оригинальной игре был ряд карт, которые имели принудительное действие сброса, эта функция еще не была реализована в ремейке, НО теперь она есть.\n6. Локализации! #Оригинальная игра имела разные языковые версии в разных дистрибутивах игры. Это не самый удобный способ поддержки языковых пакетов (локализаций). Теперь вы можете легко перевести игру на свой родной язык. Для этого достаточно связаться со мной и попросить доступ к онлайн-таблице.\n\u0026hellip;и это еще не конец! #Основной функционал игры (в режиме одиночной игры) почти готов! Скоро выйдет первая оффлайн-версия игры. Следующим крупным обновлением станет онлайновый мультиплеер.\nК сожалению, в данный момент я очень занят учебой и не могу уделять разработке большую часть своего времени, прошу набраться терпения!.\n","date":"27.05.2021","permalink":"/ru/dev/2021/arcomage-remake-updates-first-release-soon/","section":"Проекты","summary":"Я все еще работаю над ремейком Аркомага, последние несколько месяцев я был очень занят из-за учебы. Но я старался найти время, чтобы сделать хоть какой-то прогресс. Поэтому я хотел бы написать небольшой журнал текущих изменений.","title":"Обновления ремейка Аркомага. Первый релиз уже скоро!"},{"content":"Привет! Я инди-разработчик, работающий над ремейком карточной мини-игры из серии Might \u0026amp; Magic под названием Arcomage.\nЯ очень люблю Arcomage и хочу сделать действительно хороший ремейк. Я очень стараюсь сохранить его оригинальный вид. Я не хочу добавлять никакой другой функциональности, нарушающей баланс. Возможно, позже я добавлю прямую возможность создавать свои собственные колоды, что-то вроде модов, как основанных на стандартных колодах карт, так и полностью своих собственных. В данный момент я работаю над повторением версии, которая была в самой Might and Magic, то есть версии для одного игрока и компьютера в качестве оппонента. Позже я буду работать над многопользовательскими режимами. Поскольку я разрабатываю все это в одиночку, у меня нет даты выхода конкретных версий.\nЧто уже сделано на данный момент:\nПолностью обновлена графика (с использованием апскейла через Topaz Gigapixel AI и waifu2x). Теперь вся графика выглядит просто отлично, и точно так же, как в оригинале. Переместил всю оригинальную колоду карт в базу данных для удобства локализации. Весь интерфейс также легко локализовать. Базовая механика. Использование карт и их сценариев. Оригинальные звуки были перенесены в ремейк. Я подумываю об улучшении их качества, но пока не знаю, как это сделать. Оригинальный интерфейс. Все выглядит точно так же, как и в оригинале. А еще есть крутые частицы! Какой-то ИИ для противника (компьютера). Я уже очень хочу переписать его с нуля, но все руки не доходят. Вы можете найти список всех запланированных функций или функций, над которыми я работаю сейчас, ну и просто прогресс проекта, на моей доске Trello.\nОгромное спасибо всем за проявленный интерес к проекту.\nСпасибо Александру Кропу за приобщение к удивительному миру Might and Magic и Arcomage в частности. Огромное спасибо ему за вдохновение на создание этого ремейка.\nСпасибо крутым ребятам с r/MightAndMagic subreddit, они очень тепло приняли мой пост о том, что я разрабатываю ремейк.\n","date":"05.10.2020","permalink":"/ru/dev/2020/arcomage-remake-i-m-working-currently/","section":"Проекты","summary":"Привет! Я инди-разработчик, работающий над ремейком карточной мини-игры из серии Might \u0026amp; Magic под названием Arcomage.","title":"Ремейк Arcomage над которым я сейчас работаю"},{"content":"","date":null,"permalink":"/ru/categories/","section":"Categories","summary":"","title":"Categories"}]