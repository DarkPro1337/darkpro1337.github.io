[{"content":"","date":null,"permalink":"/tags/devlog/","section":"Tags","summary":"","title":"Devlog"},{"content":"","date":null,"permalink":"/tags/godot/","section":"Tags","summary":"","title":"Godot"},{"content":"","date":null,"permalink":"/tags/modding/","section":"Tags","summary":"","title":"Modding"},{"content":"Dev-blogs about my pet-projects, or just some random things that I\u0026rsquo;m working on right now.\nPosts #","date":null,"permalink":"/dev/","section":"Projects","summary":"Dev-blogs about my pet-projects, or just some random things that I\u0026rsquo;m working on right now.","title":"Projects"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/wasm/","section":"Tags","summary":"","title":"Wasm"},{"content":" While developing Arcomage using Godot .NET, I faced a challenge: how can I add support for script-based modding to the game? The issue was that I didn\u0026rsquo;t want to allow direct DLL injection—highly insecure and prone to abuse by injecting malicious code that could compromise user systems or steal sensitive data like passwords.\nInstead, I opted for a sandboxed approach where mods execute safely without posing risks to end users. My goal was to create a common API for all mods to make them both safer and easier to write. That\u0026rsquo;s when I came across a video by the nameless dev that clearly and concisely explained how to implement WASM mod support. Huge thanks to the author for sharing his insights!\nI was aware of WebAssembly before, but I hadn’t considered it as a sandbox for running script-based mods in a game. It was a revelation to learn that Microsoft Flight Simulator 2020 uses WebAssembly for mod scripts—and that\u0026rsquo;s pretty awesome!\nSo, I decided to try something similar for Arcomage. In this article, I\u0026rsquo;ll share my findings and ideas on implementing WASM modding in Godot .NET.\nWhat Is WebAssembly and How Do You Use It? #WASM is a bytecode format that runs in a virtual machine. Unlike .NET\u0026rsquo;s CIL, WASM is designed to execute in browsers or any application that supports it. In our case, we\u0026rsquo;re using Godot\u0026rsquo;s .NET version. For .NET, several embedded WASM runtimes exist. In my project, I used Wasmtime from the Bytecode Alliance.\nExample: Creating a WASM Mod #Setup #First, add the Wasmtime NuGet package to your Godot .NET project:\ndotnet add package wasmtime Alternatively, add the following Package Reference to your .csproj file:\n\u0026lt;PackageReference Include=\u0026#34;Wasmtime\u0026#34; Version=\u0026#34;22.0.0\u0026#34; /\u0026gt; Don\u0026rsquo;t forget to run dotnet restore after modifying your project file.\nTo compile WASM files from AssemblyScript, install Node.js (which comes with npm). You can download it from Node.js\u0026rsquo;s official website. Verify the installations with:\nnode -v npm -v In this example, we\u0026rsquo;ll compile WASM using AssemblyScript. If you prefer another language (like Rust with wasm-pack), refer to its documentation. I also highly recommend reviewing the AssemblyScript compiler docs.\nAfter installing Node.js, run:\nnpm install -g assemblyscript This installs the AssemblyScript compiler globally (or install it locally if preferred).\nWith the necessary tools in place, it\u0026rsquo;s time to write some code!\nWASM #Choose a working directory and create two files: env.ts and mod.ts.\nIn env.ts, define the exported functions you want available to your WASM mod:\n@external(\u0026#34;env\u0026#34;, \u0026#34;host_log\u0026#34;) declare function host_log(ptr: i32, len: i32): void; export function log(message: string): void { const encoded = String.UTF8.encode(message); host_log(changetype\u0026lt;i32\u0026gt;(encoded), encoded.byteLength); } In this example, the log function sends a message to the host via host_log, which receives a pointer to the UTF-8–encoded string and its length.\nIn mod.ts, write the code to execute in the WASM mod:\nimport { log } from \u0026#34;./env\u0026#34;; export function init(): void { log(\u0026#34;Hello, World!\u0026#34;); } Here, the exported init function will be called upon mod initialization, triggering a log message. On the Godot side, you\u0026rsquo;ll handle this (for example, by printing it to the console with GD.Print).\nThis simple setup illustrates the concept. As a developer, share the env.ts file with your modders so they can use the defined functions. In this scheme, mod.ts serves as the mod\u0026rsquo;s entry point, where you specify an entry function (in this case, init) that the game calls automatically when loading the WASM file.\nTo compile your WASM mod, run:\nasc .\\mod.ts -o mod.wasm If AssemblyScript isn’t installed globally, ensure you provide the correct path. Running this command produces a mod.wasm file—the entry point for your mod.\nGodot .NET Integration #Place the compiled WASM file in your Godot project\u0026rsquo;s user directory (e.g., user://mod.wasm).\nI recommend using a custom user directory, enabled via the application/config/use_custom_user_dir flag in your project.godot file. Also, set a folder name using application/config/custom_user_dir_name.\nCreate a new C# class inheriting from Node—in my example, it\u0026rsquo;s named WasmLoader:\nusing Godot; using System.Text; using Wasmtime; using Engine = Wasmtime.Engine; public partial class WasmLoader : Node { public override void _Ready() { byte[] wasmBytes; using (var file = FileAccess.Open(\u0026#34;user://mod.wasm\u0026#34;, FileAccess.ModeFlags.Read)) wasmBytes = file.GetBuffer((int)file.GetLength()); using var engine = new Engine(); using var module = Module.FromBytes(engine, \u0026#34;mod\u0026#34;, wasmBytes); using var store = new Store(engine); using var linker = new Linker(engine); linker.Define(\u0026#34;env\u0026#34;, \u0026#34;host_log\u0026#34;, Function.FromCallback(store, (Caller caller, int ptr, int len) =\u0026gt; { var memory = caller.GetMemory(\u0026#34;memory\u0026#34;); if (memory is null) return; var span = memory.GetSpan\u0026lt;byte\u0026gt;(0); var message = Encoding.UTF8.GetString(span.Slice(ptr, len).ToArray()); GD.Print(message); })); linker.Define(\u0026#34;env\u0026#34;, \u0026#34;abort\u0026#34;, Function.FromCallback(store, (int msg, int file, int line, int column) =\u0026gt; { GD.Print($\u0026#34;Abort called at {file}:{line}:{column}\u0026#34;); })); var instance = linker.Instantiate(store, module); instance.GetAction(\u0026#34;init\u0026#34;)?.Invoke(); } } Let\u0026rsquo;s break down what happens in this code:\nThe WASM file is loaded from user://mod.wasm and its bytes are passed to Module.FromBytes. An Engine, Module, Store, and Linker are created to execute the WASM mod. The functions exported by the mod are defined. Here, host_log takes a pointer and length, decodes the string from memory, and prints it. The abort function is also defined; it’s called on errors within the WASM mod. Although you might not need it, the compiler includes it by default. Without defining it, you’d get a Wasmtime.WasmtimeException for an undefined import. Finally, the WASM mod is instantiated and its init function is invoked, printing \u0026ldquo;Hello, World!\u0026rdquo; to the console. After creating the WasmLoader class, add it to your scene and run the game. If everything is set up correctly, you should see \u0026ldquo;Hello, World!\u0026rdquo; in the console. Alternatively, you can add the loader to your project\u0026rsquo;s Autoload to run it at startup.\nNext Steps #Here are a few ideas to expand your modding system:\nForwarding Process Callbacks:\nPass the _Process and _PhysicsProcess callbacks to the WASM mod (remember to include delta as a parameter) so it can interact with the game each frame—for example, updating object positions:\npublic override void _Process(double delta) { foreach (var mod in _mods.Values) mod.Instance.GetFunction(\u0026#34;process\u0026#34;)?.Invoke(delta); } Here, _mods is a Dictionary storing loaded mods, with the mod name as the key and a record (containing the mod instance and its path) as the value. You can similarly forward events (like an exit event) when the game closes or a mod is unloaded.\nCreating a Mod API:\nDevelop a Mod API that exposes functions (e.g., log, spawn, destroy, move) for modders. Aim for simplicity and clarity, and document the API thoroughly so modders know what’s available and how to use it.\nAutomatic Mod Loading:\nImplement functionality to load WASM mods from a designated folder, allowing modders to simply drop their mod files into the folder for automatic loading. Also, consider adding support for unloading mods to avoid performance issues with too many active mods. A full mod management interface (such as one integrated into the game menu) would be a great enhancement.\nI hope this small article helps you implement WASM modding in your Godot .NET games. If you have any questions or need further assistance, feel free to leave a comment—I\u0026rsquo;ll do my best to help!\n","date":"13.02.2025","permalink":"/dev/wasm-modding-godot/","section":"Projects","summary":"Discover safe, sandboxed WASM modding for your Godot .NET game using Wasmtime and AssemblyScript. Build a custom mod API that avoids DLL injection risks.","title":"WASM Modding for Your Godot .NET Games"},{"content":"Hi, my name is Artem! I’m a software developer based in Yerevan, Armenia. Currently working at Saber Interactive as a Tools Programmer, focusing on WPF (MVVM) with C# and occasionally C++. I’m passionate about creating tools that make workflows more efficient and enjoyable.\nMy Devices\rPet Projects Arcomage — A Godot Engine 4 (.NET) fan-remake of the classic Arcomage card game. Read Devlogs. GodotHub — An AvaloniaUI launcher and instance manager for Godot Engine. Abandoned for an indefinite time, sorry. Translations I enjoy helping the community by translating guides from English into Russian:\nDiscord Webhooks (original by birdie0) GML Guide (original by GDPalace) The track I\u0026rsquo;m obsessed with right now Scrobbles\rFavorite Film and TV Show Film\nThe Gentlemen\rTV Show\nThe Sopranos\rFavourite Games Profile\rSupport me Sponsors\rUSDT TRC20\rBuy Me a Coffee\r","date":null,"permalink":"/about/","section":"About me","summary":"A little bit about me.","title":"About me"},{"content":" Download CV Armenia, Yerevan\ndarkprothekun@gmail.com\n@darkpro1337\nLinkedIn\nGitHub\nSummary Results-driven Tools Programmer with a proven track record at Saber Interactive. Specializing in designing robust, efficient WPF-based solutions that streamline workflows and elevate user satisfaction. Adept at bridging the gap between technical innovation and practical application, I consistently deliver measurable improvements through collaboration, code quality, and agile practices.\nProfessional Experience Tools Programmer Saber Interactive in Yerevan 2022—Present\nEngineered and maintained advanced debugging utilities and level editors to accelerate development workflows and adapt to evolving project requirements. Reduced tool issues by 25% through proactive maintenance, bug fixes, and regular updates. Developed intuitive WPF user-interfaces that cut manual work by 20% and minimized UI lag by 30%, boosting overall team efficiency. Designed custom WPF controls and integrated both internal and external APIs (e.g., Figma) to extend tool functionality and ensure seamless interoperability. Partnered with design teams to modernize UI elements, resulting in significantly enhanced user experiences. Enforced high standards of code quality via systematic reviews and version control with Perforce. Projects Highlights Education Admiral Makarov State University of Maritime and Inland Shipping in Kotlas 2018—2021\nGPA: 4.72/5.0 Associate’s Degree in Information Systems (Honors) Focused on practical systems development during an intensive internship. Skills \u0026amp; Knowledge Languages: C#, C++, Python Frameworks: WPF, WCF, ASP.NET, AvaloniaUI Tools: Git, Perforce, Godot Engine, Unreal Engine Markup: XAML, HTML5 Databases: MS SQL, MySQL, SQLite Scripting: PowerShell, Batch, Bash Languages English (advanced) Russian (native) Polish (basic) Active Pet Projects Arcomage — Godot 4 .NET remake of the Arcomage card game. Hobbies Indie game development — currently developing Arcomage and occasionally assisting friends with their projects. Computer graphics — occasionally experimenting with Blender and Daz3D; previously worked with Source Filmmaker. Playing guitar — still improving my technique, though not consistently. Video editing — creating YouTube videos and stream highlights. Game modding — casually creating mods for fun, with plans to share a few cool ones in the future. Additional Skills \u0026amp; Interests Open to relocation and remote work opportunities. Enjoy teaching people and sharing experiences. Passionate about learning new things and writing in-depth guides. ","date":null,"permalink":"/cv/","section":"Artem Chernykh (@DarkPro1337)","summary":"Results-driven Tools Programmer with a proven track record at Saber Interactive. Specializing in designing robust, efficient WPF-based solutions that streamline workflows and elevate user satisfaction. Adept at bridging the gap between technical innovation and practical application, I consistently deliver measurable improvements through collaboration, code quality, and agile practices.","title":"Artem Chernykh"},{"content":" 25 y.o. • .NET fan • Godot enthusiast • Translating things • Videomaker ","date":null,"permalink":"/","section":"Artem Chernykh (@DarkPro1337)","summary":"24 y.o., .NET fan, Godot enthusiast, translator, videomaker. C# Tools Programmer @ Saber Interactive.","title":"Artem Chernykh (@DarkPro1337)"},{"content":"\rLaptop\rLegion 5 15ARH7H\rAMD Ryzen 7 5800H\rNVIDIA GeForce RTX 3060\rSamsung 16Gb DDR5-4800MHz\r2x SKHynix 2TB SSD M.2 NVMe\rPeripherals\rWebcam\rLogitech StreamCam\rMicrophone\rElgato Wave:1\rHeadphones\rAudio-Technica ATH-M40x\rDisplay\rLG 24MK600M\rMouse\rLogitech G304\rKeyboard\rNoname Mechanical\rJerrzi Honey Bean Switches\rGamepad\rXbone Rev.3\rCapture Card\rEzcap326C\rOther Devices\rPhone\rGoogle Pixel 7\rObsidian\rConsole\rNintendo Switch OLED\rWhite\rSingle-board computer\rRaspberry Pi 4 Model B\r4GB RAM\r","date":null,"permalink":"/about/devices/","section":"About me","summary":"A list of devices I use for work and entertainment.","title":"My Devices"},{"content":"","date":null,"permalink":"/tags/arcomage/","section":"Tags","summary":"","title":"Arcomage"},{"content":"Hello everyone! I graduated from the university and received a diploma, already managed to get a job. Had been ill with COVID-19, without complications, suffered in a relatively mild form. And I\u0026rsquo;m ready to work on the remake further!\nI worked on localizations, and now the cards of the Russian locale are completely localized!\nThere are still problems with the fact that the names of the cards do not fit in the Russian locale, but in general everything works fine.\nAlso, for locales other than the English, the resources panels will look a little different, due to the fact that the names of these same resources do not fit in the place where they are located in the English locale. I just moved them up, as it was in the Russian version of Arcomage for PC. Here is a little example of it in-game:\nOf the current plans, I would like to note that I want to rewrite the AI ​​for the bot. It works very strangely, and sometimes hangs up the game. I would like to get rid of this, and teach him how to use cards with forced discards. I need to finish the animation of the appearance of the card in the deck, I still haven\u0026rsquo;t figured out how to do it correctly. I may have to rewrite something, I hope this will not be a big problem.\nThis is all news for the current day. Thank you for your attention!\n","date":"25.07.2021","permalink":"/dev/2021/arcomage-remake-0-3-alpha-updates/","section":"Projects","summary":"I graduated from the university and received a diploma, already managed to get a job. Had been ill with COVID-19, without complications, suffered in a relatively mild form. And I\u0026rsquo;m ready to work on the remake further!","title":"Arcomage Remake 0.3-alpha updates!"},{"content":"Hello everyone! It\u0026rsquo;s Artеm again, I\u0026rsquo;m alive, I\u0026rsquo;m still working on the remake of Arcomage, I\u0026rsquo;ve been very busy the last few months because of my studies. But I tried to find time to make some progress. So I would like to write a small change log of current updates.\n1. The game will have its own website! #Yes, the game already has its own pages on itch.io and GameJolt, but I thought it would be nice if the remake had its own website. It looks something like this.\nThe main idea is a page where you can download the latest version of the game with one button.\n2. HTML5 version! #Yes, the game can be played in the browser. I hope this feature will live to release, but it seems like the tab with the game eats no more RAM than YouTube tab.\nIf everything goes well, the HTML5 version of the game will be the same as the usual one, but if something goes wrong, I will make a separate version of the game for the browser.\n3. Card graveyard #This is the place where the cards will be placed after use, a fairly simple feature that was in the original game, but I killed a lot of time on it.\n4. Particles! #As in the original game, cards have their own positive and negative effects for players, for clarity, which are displayed in the form of particles scattering from objects of attention, they are now in my remake.\n5. Force card discarding action #In the original game, there were a number of cards that had a forced discard action, this function has not yet been implemented in the remake, BUT now it is.\n6. Localizations! #The original game had different language versions as different distributions of the game. This is not the most convenient way to support language packs (locales). Now you can easily translate the game into your native language. You just need to contact me and ask for access to the online spreadsheet.\n\u0026hellip;and this isn\u0026rsquo;t end! #The main functionality of the game (in single player mode) is almost ready! The first offline version of the game will be out soon. The next major update will be online multiplayer.\nUnfortunately, at the moment I am very busy with my studies, and I cannot devote most of my time to development, please be patient!\n","date":"27.05.2021","permalink":"/dev/2021/arcomage-remake-updates-first-release-soon/","section":"Projects","summary":"I\u0026rsquo;m still working on the remake of Arcomage, I\u0026rsquo;ve been very busy the last few months because of my studies. But I tried to find time to make some progress. So I would like to write a small change log of current updates.","title":"Arcomage Remake updates. First release soon!"},{"content":"Hello! I am an indie developer working on a remake of the Might \u0026amp; Magic series card mini-game called Arcomage.\nI really love Arcomage and want to make a really good remake. I try very hard to keep its original appearance. I don\u0026rsquo;t want to add any other balance-breaking functionality. Perhaps later I will add a direct ability to create my own decks, something like mods, both based on a standard deck of cards, and completely your own. At the moment I am working on repeating the version that was in Might and Magic itself, i.e. version for one player, and a computer as an opponent. Later I will be working on multiplayer modes. Since I develop all this alone, I do not have a release date for specific versions.\nWhat has already been done so far:\nFully updated graphics (using upscale via Topaz Gigapixel AI and waifu2x). Now all the graphics look just fine, and just like in the original. Moved the entire original card deck to the database for ease of localization. The whole interface is also easy to localize. Basic mechanics. Using cards and their scripts. The original sounds have been carried over to the remake. I am thinking about improving their quality, but I don’t know how to do it yet. Original interface. Everything looks exactly the same as in the original. And then there are the cool particles! Some kind of AI for the opponent (computer). I already really want to rewrite it from scratch, but all the hands do not reach. You can find a list of all the planned features or features that I\u0026rsquo;m working on now, well, just the progress of the project, on my Trello board.\nThank you all very much for your interest in the project.\nThanks to Alexander Krop for initiation to the wonderful world of Might and Magic and Arcomage in particular. Thanks a lot to him for the inspiration to make this remake.\nThanks to the cool guys from the r/MightAndMagic subreddit, they very warmly accepted my post about the fact that I am developing a remake.\n","date":"05.10.2020","permalink":"/dev/2020/arcomage-remake-i-m-working-currently/","section":"Projects","summary":"Hello! I am an indie developer working on a remake of the Might \u0026amp; Magic series card mini-game called Arcomage.","title":"Arcomage Remake I'm working on currently"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]